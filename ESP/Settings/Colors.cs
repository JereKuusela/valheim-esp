using BepInEx.Configuration;
using UnityEngine;

namespace ESP {
  public partial class Settings {
    private static Color ParseColor(string color) {
      if (ColorUtility.TryParseHtmlString(color, out var parsed)) return parsed;
      return Color.white;
    }
    public static ConfigEntry<string> configCreatureRayColor;
    public static Color CreatureRayColor => ParseColor(configCreatureRayColor.Value);
    public static ConfigEntry<string> configPickableOneTimeColor;
    public static Color PickableOneTimeColor => ParseColor(configPickableOneTimeColor.Value);
    public static ConfigEntry<string> configPickableRespawningColor;
    public static Color PickableRespawningColor => ParseColor(configPickableRespawningColor.Value);
    public static ConfigEntry<string> configLocationRayColor;
    public static Color LocationRayColor => ParseColor(configLocationRayColor.Value);
    public static ConfigEntry<string> configContainerRayColor;
    public static Color ContainerRayColor => ParseColor(configContainerRayColor.Value);
    public static ConfigEntry<string> configOreRayColor;
    public static Color OreRayColor => ParseColor(configOreRayColor.Value);
    public static ConfigEntry<string> configTreeRayColor;
    public static Color TreeRayColor => ParseColor(configTreeRayColor.Value);
    public static ConfigEntry<string> configDestructibleRayColor;
    public static Color DestructibleRayColor => ParseColor(configDestructibleRayColor.Value);
    public static ConfigEntry<string> configSpawnerOneTimeColor;
    public static Color SpawnerOneTimeColor => ParseColor(configSpawnerOneTimeColor.Value);
    public static ConfigEntry<string> configSpawnerRespawningColor;
    public static Color SpawnerRespawningColor => ParseColor(configSpawnerRespawningColor.Value);
    public static ConfigEntry<string> configNoiseColor;
    public static Color NoiseColor => ParseColor(configNoiseColor.Value);
    public static ConfigEntry<string> configCoverRayColor;
    public static Color CoverRayColor => ParseColor(configCoverRayColor.Value);
    public static ConfigEntry<string> configCoverRayBlockedColor;
    public static Color CoverRayBlockedColor => ParseColor(configCoverRayBlockedColor.Value);
    public static ConfigEntry<string> configCreatureHearColor;
    public static Color CreatureHearColor => ParseColor(configCreatureHearColor.Value);
    public static ConfigEntry<string> configCreatureViewColor;
    public static Color CreatureViewColor => ParseColor(configCreatureViewColor.Value);
    public static ConfigEntry<string> configCreatureAlertViewColor;
    public static Color CreatureAlertViewColor => ParseColor(configCreatureAlertViewColor.Value);
    public static ConfigEntry<string> configCreatureFireLimitColor;
    public static Color CreatureFireLimitColor => ParseColor(configCreatureFireLimitColor.Value);
    public static ConfigEntry<string> configCreatureTotalLimitColor;
    public static Color CreatureTotalLimitColor => ParseColor(configCreatureTotalLimitColor.Value);
    public static ConfigEntry<string> configCreaturePartnerCheckColor;
    public static Color CreaturePartnerCheckColor => ParseColor(configCreaturePartnerCheckColor.Value);
    public static ConfigEntry<string> configCreatureFoodCheckColor;
    public static Color CreatureFoodCheckColor => ParseColor(configCreatureFoodCheckColor.Value);
    public static ConfigEntry<string> configCreatureEatRangeColor;
    public static Color CreatureEatRangeColor => ParseColor(configCreatureEatRangeColor.Value);
    public static ConfigEntry<string> configRulerColor;
    public static Color RulerColor => ParseColor(configRulerColor.Value);
    public static ConfigEntry<string> configSpawnAreaTriggerColor;
    public static Color SpawnAreaTriggerColor => ParseColor(configSpawnAreaTriggerColor.Value);
    public static ConfigEntry<string> configSpawnAreaNearColor;
    public static Color SpawnAreaNearColor => ParseColor(configSpawnAreaNearColor.Value);
    public static ConfigEntry<string> configSpawnAreaSpawnColor;
    public static Color SpawnAreaSpawnColor => ParseColor(configSpawnAreaSpawnColor.Value);
    public static ConfigEntry<string> configMineRockSupportColor;
    public static Color MineRockSupportColor => ParseColor(configMineRockSupportColor.Value);
    public static ConfigEntry<string> configEffectAreaPrivateAreaColor;
    public static Color EffectAreaPrivateAreaColor => ParseColor(configEffectAreaPrivateAreaColor.Value);
    public static ConfigEntry<string> configEffectAreaComfortColor;
    public static Color EffectAreaComfortColor => ParseColor(configEffectAreaComfortColor.Value);
    public static ConfigEntry<string> configEffectAreaBurningColor;
    public static Color EffectAreaBurningColor => ParseColor(configEffectAreaBurningColor.Value);
    public static ConfigEntry<string> configEffectAreaHeatColor;
    public static Color EffectAreaHeatColor => ParseColor(configEffectAreaHeatColor.Value);
    public static ConfigEntry<string> configEffectAreaFireColor;
    public static Color EffectAreaFireColor => ParseColor(configEffectAreaFireColor.Value);
    public static ConfigEntry<string> configEffectAreaNoMonstersColor;
    public static Color EffectAreaNoMonstersColor => ParseColor(configEffectAreaNoMonstersColor.Value);
    public static ConfigEntry<string> configEffectAreaTeleportColor;
    public static Color EffectAreaTeleportColor => ParseColor(configEffectAreaTeleportColor.Value);
    public static ConfigEntry<string> configEffectAreaPlayerBaseColor;
    public static Color EffectAreaPlayerBaseColor => ParseColor(configEffectAreaPlayerBaseColor.Value);
    public static ConfigEntry<string> configEffectAreaOtherColor;
    public static Color EffectAreaOtherColor => ParseColor(configEffectAreaOtherColor.Value);
    public static ConfigEntry<string> configEffectAreaCustomContainerColor;
    public static Color EffectAreaCustomContainerColor => ParseColor(configEffectAreaCustomContainerColor.Value);
    public static ConfigEntry<string> configEffectAreaCustomCraftingColor;
    public static Color EffectAreaCustomCraftingColor => ParseColor(configEffectAreaCustomCraftingColor.Value);
    public static ConfigEntry<string> configSmokeColor;
    public static Color SmokeColor => ParseColor(configSmokeColor.Value);
    public static ConfigEntry<string> configRandomEventSystemRayColor;
    public static Color RandomEventSystemRayColor => ParseColor(configRandomEventSystemRayColor.Value);
    public static ConfigEntry<string> configBiomeAshlandsColor;
    public static Color BiomeAshlandsColor => ParseColor(configBiomeAshlandsColor.Value);
    public static ConfigEntry<string> configBiomeBlackForestColor;
    public static Color BiomeBlackForestColor => ParseColor(configBiomeBlackForestColor.Value);
    public static ConfigEntry<string> configBiomeDeepNorthColor;
    public static Color BiomeDeepNorthColor => ParseColor(configBiomeDeepNorthColor.Value);
    public static ConfigEntry<string> configBiomeMeadowsColor;
    public static Color BiomeMeadowsColor => ParseColor(configBiomeMeadowsColor.Value);
    public static ConfigEntry<string> configBiomeMistlandsColor;
    public static Color BiomeMistlandsColor => ParseColor(configBiomeMistlandsColor.Value);
    public static ConfigEntry<string> configBiomeMountainColor;
    public static Color BiomeMountainColor => ParseColor(configBiomeMountainColor.Value);
    public static ConfigEntry<string> configBiomeOceanColor;
    public static Color BiomeOceanColor => ParseColor(configBiomeOceanColor.Value);
    public static ConfigEntry<string> configBiomePlainsColor;
    public static Color BiomePlainsColor => ParseColor(configBiomePlainsColor.Value);
    public static ConfigEntry<string> configBiomeSwampColor;
    public static Color BiomeSwampColor => ParseColor(configBiomeSwampColor.Value);
    public static ConfigEntry<string> configBiomeOtherColor;
    public static Color BiomeOtherColor => ParseColor(configBiomeOtherColor.Value);
    private static void InitColors(ConfigFile config) {
      var section = "6. Colors (predefined, #RRGGBB, #RRGGBBAA)";
      configCreatureRayColor = config.Bind(section, "Creature ray", "magenta", "");
      configPickableOneTimeColor = config.Bind(section, "Pickable ray (one time)", "green", "");
      configPickableRespawningColor = config.Bind(section, "Pickable ray (respawning)", "blue", "");
      configLocationRayColor = config.Bind(section, "Location ray", "black", "");
      configContainerRayColor = config.Bind(section, "Container ray", "white", "");
      configOreRayColor = config.Bind(section, "Ore ray", "gray", "");
      configTreeRayColor = config.Bind(section, "Tree ray", "white", "");
      configDestructibleRayColor = config.Bind(section, "Destructible ray", "white", "");
      configSpawnerOneTimeColor = config.Bind(section, "Spawn point ray (one time)", "red", "");
      configSpawnerRespawningColor = config.Bind(section, "Spawn point ray (respawning)", "yellow", "");
      configNoiseColor = config.Bind(section, "Noise sphere", "cyan", "");
      configCoverRayColor = config.Bind(section, "Cover ray", "green", "");
      configCoverRayBlockedColor = config.Bind(section, "Cover ray (blocked)", "red", "");
      configCreatureHearColor = config.Bind(section, "Creature hearing sphere", "green", "");
      configCreatureViewColor = config.Bind(section, "Creature sight cone", "white", "");
      configCreatureAlertViewColor = config.Bind(section, "Creature alert sight cone", "red", "");
      configCreatureFireLimitColor = config.Bind(section, "Creature fire limit sphere", "magenta", "");
      configCreatureTotalLimitColor = config.Bind(section, "Creature total limit sphere", "cyan", "");
      configCreaturePartnerCheckColor = config.Bind(section, "Creature partner check sphere", "magenta", "");
      configCreatureFoodCheckColor = config.Bind(section, "Creature food check sphere", "gray", "");
      configCreatureEatRangeColor = config.Bind(section, "Creature eat range sphere", "black", "");
      configRulerColor = config.Bind(section, "Ruler", "red", "");
      configSpawnAreaTriggerColor = config.Bind(section, "Spawner trigger sphere", "red", "");
      configSpawnAreaNearColor = config.Bind(section, "Spawner near limit sphere", "white", "");
      configSpawnAreaSpawnColor = config.Bind(section, "Spawner spawn sphere", "cyan", "");
      configMineRockSupportColor = config.Bind(section, "Minerock support bounding box", "red", "");
      configMineRockSupportColor.SettingChanged += (s, e) => {
        Drawer.SetColor(Constants.SupportTag, MineRockSupportColor);
      };
      configEffectAreaPrivateAreaColor = config.Bind(section, "Ward effect sphere", "gray", "");
      configEffectAreaComfortColor = config.Bind(section, "Comfort effect sphere", "cyan", "");
      configEffectAreaBurningColor = config.Bind(section, "Burning effect sphere", "yellow", "");
      configEffectAreaHeatColor = config.Bind(section, "Heat effect sphere", "magenta", "");
      configEffectAreaFireColor = config.Bind(section, "Fire effect sphere", "red", "");
      configEffectAreaNoMonstersColor = config.Bind(section, "No monsters effect sphere", "green", "");
      configEffectAreaTeleportColor = config.Bind(section, "Teleport effect sphere", "blue", "");
      configEffectAreaPlayerBaseColor = config.Bind(section, "Player base effect sphere", "white", "");
      configEffectAreaOtherColor = config.Bind(section, "Unknown effect spheres", "Black", "");
      configEffectAreaCustomContainerColor = config.Bind(section, "Custom container sphere", "yellow", "");
      configEffectAreaCustomCraftingColor = config.Bind(section, "Custom crafting station sphere", "yellow", "");
      configSmokeColor = config.Bind(section, "Smoke sphere", "black", "");
      configRandomEventSystemRayColor = config.Bind(section, "Random even system ray", "black", "");
      configBiomeAshlandsColor = config.Bind(section, "Ashlands color", "red", "");
      configBiomeBlackForestColor = config.Bind(section, "Black Forest color", "magenta", "");
      configBiomeDeepNorthColor = config.Bind(section, "Deep North color", "gray", "");
      configBiomeMeadowsColor = config.Bind(section, "Meadows color", "green", "");
      configBiomeMistlandsColor = config.Bind(section, "Mistlands color", "gray", "");
      configBiomeMountainColor = config.Bind(section, "Mountain color", "white", "");
      configBiomeOceanColor = config.Bind(section, "Ocean color", "blue", "");
      configBiomePlainsColor = config.Bind(section, "Plains color", "yellow", "");
      configBiomeSwampColor = config.Bind(section, "Swamp color", "cyan", "");
      configBiomeOtherColor = config.Bind(section, "Unknown biome color", "black", "");
    }
  }
}
